# -*- coding: utf-8 -*-
"""Edf_IO.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UtbYz101dv-sZ4SdllLNl3oYvF8rORzg

# EDF to Excel

Install reruired libraries
"""

"""The code below converts an Excel file into an EDF file.

---


"""
import pandas as pd
import pyedflib
import numpy as np
from datetime import datetime
import mne
import matplotlib.pyplot as plt

def convert_excel_to_edf(excel_path, edf_output_path):
    # Load the Excel file
    excel_data = pd.ExcelFile(excel_path)

    # Load the Records and Patient sheets
    records_data = excel_data.parse('Records', header=None)
    patients_data = excel_data.parse('Patient')

    # Extract patient information (use 'XX' for missing values)
    patient_data = patients_data.iloc[0].to_dict()
    patient_name = str(patient_data.get('Name', 'XX'))
    patient_birthdate = str(patient_data.get('Birthdate', 'XX'))
    patient_sex = str(patient_data.get('Sex', 'XX'))
    patient_ID = str(patient_data.get('ID', 'XX'))
    record_date = patient_data.get('Recording_date', 'XX')
    patient_height = str(patient_data.get('Height', 'XX'))
    patient_weight = str(patient_data.get('Weight', 'XX'))
    notes = str(patient_data.get('Notes', 'XX'))

    # Handle record_date as datetime if valid
    try:
        record_start_datetime = datetime.strptime(record_date, '%Y-%m-%d')
    except (ValueError, TypeError):
        record_start_datetime = datetime.now()  # Default to current datetime if invalid

    # Extract signal data and sampling frequencies
    header_row = records_data.iloc[0].tolist()  # First row contains signal labels (e.g., 'EKG', 'PPG')
    frequency_row = records_data.iloc[1].tolist()  # Second row contains sampling frequencies
    signal_data = records_data.iloc[2:].to_numpy()  # Signal data starts from the third row

    # Prepare signals and sampling frequencies
    signals = [signal_data[:, i] for i in range(len(header_row))]
    signals = [np.array(signal, dtype=np.float64) for signal in signals]
    sampling_frequencies = [int(freq) for freq in frequency_row]

    # Create EDF+ file
    with pyedflib.EdfWriter(edf_output_path, len(signals), file_type=pyedflib.FILETYPE_EDFPLUS) as edf:
        # Set channel headers
        channel_headers = []
        for i, label in enumerate(header_row):
            ch_info = {
                'label': label,
                'dimension': 'mV',
                'sample_frequency': sampling_frequencies[i],
                'physical_min': np.min(signals[i]),
                'physical_max': np.max(signals[i]),
                'digital_min': -32768,
                'digital_max': 32767,
                'transducer': 'N/A',
                'prefilter': 'None'
            }
            channel_headers.append(ch_info)
        edf.setSignalHeaders(channel_headers)

        # Write the samples to the EDF file
        edf.writeSamples(signals)

        # Set patient and recording information
        edf.setPatientName(patient_name)  # Set patient name
        edf.setPatientCode(patient_ID)    # Set patient ID

        # Clean and truncate additional metadata
        additional_info = f"Birthdate_{patient_birthdate}_Height_{patient_height}_Weight_{patient_weight}_Notes_{notes}"
        additional_info = ''.join(c if c.isascii() and c != ' ' else '_' for c in additional_info)  # ASCII only
        additional_info = additional_info[:50]  # Limit to 50 chars to leave room for other fields
        edf.setRecordingAdditional(additional_info)

        # Set other fields to fit within the 80-character limit
        edf.setTechnician("")  # Leave technician blank
        edf.setEquipment("")  # Leave equipment blank
        edf.setAdmincode("")  # Leave admincode blank

        # Set the start date and time for the recording
        edf.setStartdatetime(record_start_datetime)

if __name__ == "__main__":
    # Paths for input Excel file and output EDF+ file
    excel_path = "simulated_signals.xlsx"
    edf_output_path = "output_sample.edf"

    # Convert Excel to EDF+
    convert_excel_to_edf(excel_path, edf_output_path)
    print(f"EDF+ file created at: {edf_output_path}")

"""# Plot the channel

With this code, we can validate the EDF file. The code loads and visualizes the desired data.
"""

import pyedflib
import matplotlib.pyplot as plt

def plot_edf(edf_path, channel_index, start_sample, num_samples):

    # Open the EDF file
    with pyedflib.EdfReader(edf_path) as edf:
        n_signals = edf.signals_in_file  # Get the number of signals in the file

        # Check if the channel index is valid
        if channel_index < 0 or channel_index >= n_signals:
            print(f"Invalid channel index. The file has {n_signals} channels.")
            return

        # Get signal labels
        signal_labels = edf.getSignalLabels()

        # Read and slice the signal
        signal = edf.readSignal(channel_index)  # Read the selected channel data
        signal = signal[start_sample:start_sample + num_samples]  # Slice the desired range

        # Plot the selected channel
        plt.figure(figsize=(12, 4))
        plt.plot(signal, label=f"Channel: {signal_labels[channel_index]}")
        plt.title(f"Channel {channel_index + 1}: {signal_labels[channel_index]} (Samples {start_sample} to {start_sample + num_samples})")
        plt.xlabel("Sample Index")
        plt.ylabel("Amplitude")
        plt.legend()
        plt.show()

# Usage
edf_path = "output_sample.edf"  #Specify the EDF file to be plotted
channel_index = 0   # Specify the channel index (0-based)
start_sample = 5000   # Specify the starting sample index
num_samples = 10000   # Specify the number of samples to plot

plot_edf(edf_path, channel_index, start_sample, num_samples)